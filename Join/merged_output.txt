

=== FILE: F:\ValkyrieHire\Services\CaptureSnapshot.cs ===

Ôªøusing Microsoft.Extensions.Logging;
using OpenQA.Selenium;
namespace Services
{
public class CaptureSnapshot : ICaptureSnapshot
{
private readonly IWebDriver _driver;
private readonly ILogger<CaptureSnapshot> _logger;
public CaptureSnapshot(IWebDriverFactory driverFactory, ILogger<CaptureSnapshot> logger)
{
_driver = driverFactory.Create();
_logger = logger;
}
public async Task<string> CaptureArtifacts(string executionFolder, string stage)
{
var timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
_logger.LogWarning($"‚ö†Ô∏è CaptureDebugArtifacts called with {timestamp}");
if (string.IsNullOrWhiteSpace(stage))
{
stage = "UnknownStage";
}
var htmlfile = $"{timestamp}.html";
var htmlPath = Path.Combine(executionFolder, htmlfile);
var screenshotFile = $"{timestamp}.png";
var screenshotPath = Path.Combine(executionFolder, screenshotFile);
await File.WriteAllTextAsync(htmlPath, _driver.PageSource);
var screenshot = ((ITakesScreenshot)_driver).GetScreenshot();
screenshot.SaveAsFile(screenshotPath);
_logger.LogDebug($"üì∏ Debug capture for '{stage}':\nHTML: {htmlfile}\nScreenshot: {screenshotFile}");
return timestamp;
}
}
}

=== FILE: F:\ValkyrieHire\Services\ChromeDriverFactory.cs ===

Ôªøusing Microsoft.Extensions.Logging;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
namespace Services
{
public class ChromeDriverFactory : IWebDriverFactory, IDisposable
{
private readonly ILogger<ChromeDriverFactory> _logger;
private ChromeDriverService _driverService;
private IWebDriver? _sharedDriver;
public ChromeDriverFactory(ILogger<ChromeDriverFactory> logger)
{
_logger = logger;
_driverService = ChromeDriverService.CreateDefaultService();
_driverService.HideCommandPromptWindow = true;
}
public IWebDriver Create()
{
return CreateDriver(GetDefaultOptions());
}
public IWebDriver Create(Action<ChromeOptions> configureOptions)
{
var options = GetDefaultOptions();
configureOptions?.Invoke(options);
return CreateDriver(options);
}
public ChromeOptions GetDefaultOptions()
{
var options = new ChromeOptions();
options.AddArguments(
"--headless",
"--disable-gpu",
"--no-sandbox",
"--disable-dev-shm-usage",
"--window-size=1920,1080",
"--log-level=3"
);
options.AddExcludedArgument("enable-automation");
options.AddAdditionalOption("useAutomationExtension", false);
return options;
}
private IWebDriver CreateDriver(ChromeOptions options)
{
try
{
if (_sharedDriver == null)
{
_logger.LogInformation("Creating new ChromeDriver instance");
_sharedDriver = new ChromeDriver(_driverService, options);
}
return _sharedDriver;
}
catch (Exception ex)
{
_logger.LogError(ex, "Failed to create ChromeDriver");
throw new WebDriverException("Failed to initialize ChromeDriver", ex);
}
}
public void Dispose()
{
_driverService?.Dispose();
}
}
}

=== FILE: F:\ValkyrieHire\Services\DirectoryCheck.cs ===

Ôªøusing Microsoft.Extensions.Logging;
using Models;
namespace Services
{
public class DirectoryCheck : IDirectoryCheck
{
private readonly ILogger<JobSearch> _logger;
private readonly ExecutionOptions _executionOptions;
public DirectoryCheck(ILogger<JobSearch> logger, ExecutionOptions executionOptions)
{
_logger = logger;
_executionOptions = executionOptions;
}
public void EnsureDirectoryExists(string path)
{
if (!Directory.Exists(path))
{
Directory.CreateDirectory(path);
_logger.LogInformation($"üìÅ Created execution folder at: {_executionOptions.ExecutionFolder}");
}
}
}
}

=== FILE: F:\ValkyrieHire\Services\ICaptureSnapshot.cs ===

Ôªønamespace Services
{
public interface ICaptureSnapshot
{
Task<string> CaptureArtifacts(string executionFolder, string stage);
}
}

=== FILE: F:\ValkyrieHire\Services\IDirectoryCheck.cs ===

Ôªønamespace Services
{
public interface IDirectoryCheck
{
void EnsureDirectoryExists(string path);
}
}

=== FILE: F:\ValkyrieHire\Services\IJobOfferDetail.cs ===

Ôªønamespace Services
{
public interface IJobOfferDetail
{
Task<List<Models.JobOfferDetail>> ProcessOffersAsync(IEnumerable<string> offers);
}
}

=== FILE: F:\ValkyrieHire\Services\IJobSearch.cs ===

Ôªønamespace Services
{
public interface IJobSearch
{
Task PerformSearchAsync();
}
}

=== FILE: F:\ValkyrieHire\Services\IJobSearchCoordinator.cs ===

Ôªønamespace Services
{
public interface IJobSearchCoordinator
{
Task SearchJobsAsync();
}
}

=== FILE: F:\ValkyrieHire\Services\IJobStorageService.cs ===

Ôªønamespace Services
{
public interface IJobStorageService
{
Task<IEnumerable<string>> LoadJobsAsync();
Task SaveJobsAsync(IEnumerable<string> jobs);
Task<int> GetJobCountAsync();
Task ClearStorageAsync();
}
}

=== FILE: F:\ValkyrieHire\Services\ILoginService.cs ===

Ôªønamespace Services
{
public interface ILoginService
{
Task LoginAsync();
}
}

=== FILE: F:\ValkyrieHire\Services\IPageProcessor.cs ===

Ôªønamespace Services
{
public interface IPageProcessor
{
Task<List<string>> ProcessAllPagesAsync();
}
}

=== FILE: F:\ValkyrieHire\Services\ISecurityCheck.cs ===

Ôªønamespace Services
{
public interface ISecurityCheck
{
bool IsSecurityChek();
Task TryStartPuzzle();
Task HandleSecurityPage();
Task HandleUnexpectedPage();
}
}

=== FILE: F:\ValkyrieHire\Services\IWebDriverFactory.cs ===

Ôªøusing OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
namespace Services
{
public interface IWebDriverFactory
{
IWebDriver Create();
IWebDriver Create(Action<ChromeOptions> configureOptions);
ChromeOptions GetDefaultOptions();
}
}

=== FILE: F:\ValkyrieHire\Services\JobCommandArgs.cs ===

Ôªønamespace Services
{
public class JobCommandArgs(string[] args)
{
public string MainCommand { get; } = args.FirstOrDefault(arg => arg == "--search" || arg == "--export") ?? "--help";
}
}

=== FILE: F:\ValkyrieHire\Services\JobOfferDetail.cs ===

Ôªøusing Microsoft.Extensions.Logging;
using Models;
using OpenQA.Selenium;
using OpenQA.Selenium.Support.UI;
namespace Services
{
public class JobOfferDetail : IJobOfferDetail
{
private readonly ILogger<JobOfferDetail> _logger;
private readonly IWebDriver _driver;
private readonly WebDriverWait _wait;
private readonly List<Models.JobOfferDetail> _offersDetail;
private readonly ICaptureSnapshot _capture;
private readonly ExecutionOptions _executionOptions;
private const string FolderName = "Detail";
private readonly ISecurityCheck _securityCheck;
private string FolderPath => Path.Combine(_executionOptions.ExecutionFolder, FolderName);
private readonly IDirectoryCheck _directoryCheck;
public JobOfferDetail(IWebDriverFactory driverFactory,
ILogger<JobOfferDetail> logger,
ICaptureSnapshot capture,
ISecurityCheck securityCheck,
ExecutionOptions executionOptions,
IDirectoryCheck directoryCheck)
{
_offersDetail = [];
_driver = driverFactory.Create();
_logger = logger;
_wait = new WebDriverWait(_driver, TimeSpan.FromSeconds(10));
_capture = capture;
_securityCheck = securityCheck;
_executionOptions = executionOptions;
_directoryCheck = directoryCheck;
_directoryCheck.EnsureDirectoryExists(FolderPath);
}
public async Task<List<Models.JobOfferDetail>> ProcessOffersAsync(IEnumerable<string> offers)
{
_logger.LogInformation($"üìù ID:{_executionOptions.TimeStamp} Processing detailed job offer data...");
foreach (var offer in offers)
{
try
{
_logger.LogDebug($"üåê ID:{_executionOptions.TimeStamp} Navigating to job offer URL: {offer}");
_driver.Navigate().GoToUrl(offer);
_wait.Until(driver =>
{
var xPathJobs = "
var el = driver.FindElements(By.XPath(xPathJobs)).FirstOrDefault();
return el != null && el.Displayed;
});
if (_securityCheck.IsSecurityChek())
{
await _securityCheck.TryStartPuzzle();
}
await _capture.CaptureArtifacts(FolderPath, "Detailed Job offer");
var offersDetail = await ExtractDescriptionLinkedIn();
if (offersDetail != null)
{
_offersDetail.Add(offersDetail);
_logger.LogInformation($"‚úÖ ID:{_executionOptions.TimeStamp} Detailed job offer processed successfully.");
}
}
catch (Exception ex)
{
_logger.LogError(ex, $"‚ùå ID:{_executionOptions.TimeStamp} Failed to process detailed job offer at URL: {offer}");
await _capture.CaptureArtifacts(FolderPath, "Error in Detailed Job Offer");
}
}
return _offersDetail;
}
public async Task<Models.JobOfferDetail> ExtractDescriptionLinkedIn()
{
_logger.LogDebug($"üîç ID:{_executionOptions.TimeStamp} Extracting job details from current page...");
await _capture.CaptureArtifacts(FolderPath, "Extract description");
var details = _driver.FindElements(By.XPath("
if (!details.Any())
{
var message = $"‚ùå Job details container not found. Current URL: {_driver.Url}";
_logger.LogWarning(message);
throw new InvalidOperationException(message);
}
var detail = details.FirstOrDefault(x => x != null);
_logger.LogDebug($"‚úÖ ID:{_executionOptions.TimeStamp} Job details container found.");
var seeMoreButtons = detail.FindElements(By.XPath("
if (!seeMoreButtons.Any())
{
var message = $"‚ùå ID:{_executionOptions.TimeStamp} 'See more' button not found. Current URL: {_driver.Url}";
_logger.LogWarning(message);
throw new InvalidOperationException(message);
}
_logger.LogDebug($"‚úÖ ID:{_executionOptions.TimeStamp} 'See more' button found.");
var seeMoreButton = seeMoreButtons.FirstOrDefault(x => x != null);
seeMoreButton.Click();
await _capture.CaptureArtifacts(FolderPath, "ExtractDescriptionLinkedIn");
var jobOffer = new Models.JobOfferDetail();
return jobOffer;
}
}
}

=== FILE: F:\ValkyrieHire\Services\JobSearch.cs ===

Ôªøusing Configuration;
using Microsoft.Extensions.Logging;
using Models;
using OpenQA.Selenium;
namespace Services
{
public class JobSearch : IJobSearch
{
private readonly IWebDriver _driver;
private readonly AppConfig _config;
private readonly ILogger<JobSearch> _logger;
private readonly ExecutionOptions _executionOptions;
private readonly ICaptureSnapshot _capture;
private readonly ISecurityCheck _securityCheck;
private const string FolderName = "Search";
private string FolderPath => Path.Combine(_executionOptions.ExecutionFolder, FolderName);
private readonly IDirectoryCheck _directoryCheck;
public JobSearch(IWebDriverFactory driverFactory,
AppConfig config,
ILogger<JobSearch> logger,
ICaptureSnapshot capture,
ExecutionOptions executionOptions,
ISecurityCheck securityCheck,
IDirectoryCheck directoryCheck)
{
_driver = driverFactory.Create();
_config = config;
_logger = logger;
_executionOptions = executionOptions;
_logger.LogInformation($"üìÅ Created execution folder at: {_executionOptions.ExecutionFolder}");
_capture = capture;
_securityCheck = securityCheck;
_directoryCheck = directoryCheck;
_directoryCheck.EnsureDirectoryExists(FolderPath);
}
public async Task PerformSearchAsync()
{
_logger.LogInformation($"üîç ID:{_executionOptions.TimeStamp} Navigating to LinkedIn Jobs page...");
_driver.Navigate().GoToUrl("https://www.linkedin.com/jobs");
await Task.Delay(3000);
if (_securityCheck.IsSecurityChek())
{
await _securityCheck.HandleSecurityPage();
throw new InvalidOperationException(
"‚ùå LinkedIn requires manual security verification. Please complete verification in the browser before proceeding.");
}
var searchInput = _driver.FindElements(By.XPath("
.FirstOrDefault();
if (searchInput == null)
{
await _securityCheck.HandleUnexpectedPage();
throw new InvalidOperationException(
$"‚ùå Job search input field not found. Possibly unexpected page. Current URL: {_driver.Url}");
}
await _capture.CaptureArtifacts(FolderPath, "JobsPageLoaded");
_logger.LogInformation($"üîé ID:{_executionOptions.TimeStamp} Executing job search with keyword: '{_config.JobSearch.SearchText}'...");
searchInput.SendKeys(_config.JobSearch.SearchText + Keys.Enter);
await Task.Delay(3000);
await _capture.CaptureArtifacts(FolderPath, "SearchExecuted");
_logger.LogInformation($"‚úÖ ID:{_executionOptions.TimeStamp} Search executed for: '{_config.JobSearch.SearchText}'.");
}
}
}

=== FILE: F:\ValkyrieHire\Services\JobSearchCoordinator.cs ===

Ôªøusing Configuration;
using Microsoft.Extensions.Logging;
using Models;
using OpenQA.Selenium;
using OpenQA.Selenium.Support.UI;
namespace Services
{
public class JobSearchCoordinator : IJobSearchCoordinator, IDisposable
{
private readonly IWebDriver _driver;
private readonly ILogger<JobSearchCoordinator> _logger;
private bool _disposed = false;
private readonly ILoginService _loginService;
private readonly ExecutionOptions _executionOptions;
private readonly ICaptureSnapshot _capture;
private List<string>? _offers;
private readonly IJobOfferDetail _jobOfferDetail;
private readonly IJobSearch _searchService;
private readonly IPageProcessor _processService;
private readonly IDirectoryCheck _directoryCheck;
public JobSearchCoordinator(
IWebDriverFactory driverFactory,
ILogger<JobSearchCoordinator> logger,
ILoginService loginService,
ICaptureSnapshot capture,
ExecutionOptions executionOptions,
IJobOfferDetail jobOfferDetail,
IJobSearch searchService,
IPageProcessor processService,
IDirectoryCheck directoryCheck)
{
_driver = driverFactory.Create();
_logger = logger;
_executionOptions = executionOptions;
_directoryCheck = directoryCheck;
_directoryCheck.EnsureDirectoryExists(_executionOptions.ExecutionFolder);
_loginService = loginService;
_capture = capture;
_jobOfferDetail = jobOfferDetail;
_searchService = searchService;
_processService = processService;
}
public async Task SearchJobsAsync()
{
try
{
_logger.LogInformation($"üöÄ ID:{_executionOptions.TimeStamp} Starting LinkedIn job search process...");
await _loginService.LoginAsync();
await _searchService.PerformSearchAsync();
_offers = await _processService.ProcessAllPagesAsync();
await _jobOfferDetail.ProcessOffersAsync(_offers);
_logger.LogInformation($"‚úÖ ID:{_executionOptions.TimeStamp} LinkedIn job search process completed successfully.");
}
catch (Exception ex)
{
var timestamp = await _capture.CaptureArtifacts(_executionOptions.ExecutionFolder, "An unexpected error");
_logger.LogError(ex, $"‚ùå ID:{_executionOptions.TimeStamp} An unexpected error occurred during the LinkedIn job search process. Debug artifacts saved at:\nHTML: {timestamp}.html\nScreenshot: {timestamp}.png");
throw new ApplicationException("Job search failed. See inner exception for details.", ex);
}
finally
{
_logger.LogInformation($" ID:{_executionOptions.TimeStamp}üßπ Cleaning up resources after job search process...");
Dispose();
}
}
public void Dispose()
{
if (_disposed) return;
try
{
_logger.LogDebug($" ID:{_executionOptions.TimeStamp}üßπ Disposing browser driver and cleaning resources...");
_driver?.Quit();
_driver?.Dispose();
_logger.LogInformation($"‚úÖ ID:{_executionOptions.TimeStamp} Browser driver and resources disposed successfully.");
}
catch (Exception ex)
{
_logger.LogError(ex, $"‚ùå ID:{_executionOptions.TimeStamp} Exception encountered while disposing browser resources.");
}
finally
{
_disposed = true;
GC.SuppressFinalize(this);
}
}
~JobSearchCoordinator()
{
Dispose();
}
}
}

=== FILE: F:\ValkyrieHire\Services\JsonJobStorageService.cs ===

Ôªøusing Microsoft.Extensions.Logging;
using Newtonsoft.Json;
namespace Services
{
public class JsonJobStorageService : IJobStorageService, IDisposable
{
private const string StorageFile = "jobs_data.json";
private readonly ILogger<JsonJobStorageService> _logger;
private readonly SemaphoreSlim _fileLock = new SemaphoreSlim(1, 1);
public JsonJobStorageService(ILogger<JsonJobStorageService> logger)
{
_logger = logger;
EnsureStorageDirectoryExists();
}
public async Task SaveJobsAsync(IEnumerable<string> jobs)
{
if (jobs == null)
{
_logger.LogWarning("Attempted to save null jobs collection");
throw new ArgumentNullException(nameof(jobs));
}
await _fileLock.WaitAsync();
try
{
var json = JsonConvert.SerializeObject(jobs, Formatting.Indented, new JsonSerializerSettings
{
NullValueHandling = NullValueHandling.Ignore,
DateTimeZoneHandling = DateTimeZoneHandling.Utc
});
await File.WriteAllTextAsync(StorageFile, json);
_logger.LogInformation("Successfully saved {JobCount} jobs to storage", jobs.Count());
}
catch (Exception ex)
{
_logger.LogError(ex, "Failed to save jobs to storage");
throw;
}
finally
{
_fileLock.Release();
}
}
public async Task<IEnumerable<string>> LoadJobsAsync()
{
if (!File.Exists(StorageFile))
{
_logger.LogInformation("No storage file found - returning empty collection");
return Enumerable.Empty<string>();
}
await _fileLock.WaitAsync();
try
{
var json = await File.ReadAllTextAsync(StorageFile);
var jobs = JsonConvert.DeserializeObject<List<string>>(json)
?? Enumerable.Empty<string>();
_logger.LogInformation("Loaded {JobCount} jobs from storage", jobs.Count());
return jobs;
}
catch (Exception ex)
{
_logger.LogError(ex, "Failed to load jobs from storage");
throw;
}
finally
{
_fileLock.Release();
}
}
public async Task<int> GetJobCountAsync()
{
var jobs = await LoadJobsAsync();
return jobs.Count();
}
public async Task ClearStorageAsync()
{
await _fileLock.WaitAsync();
try
{
if (File.Exists(StorageFile))
{
File.Delete(StorageFile);
_logger.LogInformation("Job storage cleared successfully");
}
}
catch (Exception ex)
{
_logger.LogError(ex, "Failed to clear job storage");
throw;
}
finally
{
_fileLock.Release();
}
}
private void EnsureStorageDirectoryExists()
{
try
{
var directory = Path.GetDirectoryName(StorageFile);
if (!string.IsNullOrEmpty(directory) && !Directory.Exists(directory))
{
Directory.CreateDirectory(directory);
}
}
catch (Exception ex)
{
_logger.LogError(ex, "Failed to ensure storage directory exists");
throw;
}
}
public void Dispose()
{
_fileLock?.Dispose();
GC.SuppressFinalize(this);
}
}
}

=== FILE: F:\ValkyrieHire\Services\LoginService.cs ===

Ôªøusing Configuration;
using Microsoft.Extensions.Logging;
using Models;
using OpenQA.Selenium;
namespace Services
{
public class LoginService : ILoginService
{
private readonly AppConfig _config;
private readonly IWebDriver _driver;
private readonly ILogger<LoginService> _logger;
private readonly ICaptureSnapshot _capture;
private readonly ExecutionOptions _executionOptions;
private const string FolderName = "Login";
private string FolderPath => Path.Combine(_executionOptions.ExecutionFolder, FolderName);
private readonly ISecurityCheck _securityCheck;
private readonly IDirectoryCheck _directoryCheck;
public LoginService(
AppConfig config,
IWebDriverFactory driverFactory,
ILogger<LoginService> logger,
ICaptureSnapshot capture,
ExecutionOptions executionOptions,
ISecurityCheck securityCheck,
IDirectoryCheck directoryCheck)
{
_config = config;
_driver = driverFactory.Create();
_logger = logger;
_capture = capture;
_executionOptions = executionOptions;
_securityCheck = securityCheck;
_directoryCheck = directoryCheck;
_directoryCheck.EnsureDirectoryExists(FolderPath);
}
public async Task LoginAsync()
{
_logger.LogInformation($"üîê ID:{_executionOptions.TimeStamp} Attempting to login to LinkedIn...");
_driver.Navigate().GoToUrl("https://www.linkedin.com/login");
await Task.Delay(3000);
if (!IsOnLoginPage())
{
if (_securityCheck.IsSecurityChek())
{
await _securityCheck.HandleSecurityPage();
throw new InvalidOperationException(
"LinkedIn requires manual security verification. Please login manually in browser first.");
}
await _securityCheck.HandleUnexpectedPage();
throw new InvalidOperationException(
$"Failed to load LinkedIn login page. Current URL: {_driver.Url}");
}
var emailInput = _driver.FindElement(By.Id("username"));
emailInput.SendKeys(_config.LinkedInCredentials.Email);
await Task.Delay(3000);
await _capture.CaptureArtifacts(FolderPath, "Entered email");
var passwordInput = _driver.FindElement(By.Id("password"));
passwordInput.SendKeys(_config.LinkedInCredentials.Password + Keys.Enter);
await Task.Delay(3000);
await _capture.CaptureArtifacts(FolderPath, "Entered password");
_logger.LogInformation($"‚úÖ ID:{_executionOptions.TimeStamp} Successfully authenticated with LinkedIn");
}
private bool IsOnLoginPage()
{
var usernameElements = _driver.FindElements(By.Id("username"));
var passwordElements = _driver.FindElements(By.Id("password"));
var urlContainsLogin = _driver.Url.Contains("/login");
return usernameElements.Any() && passwordElements.Any() && urlContainsLogin;
}
}
}

=== FILE: F:\ValkyrieHire\Services\PageProcessor.cs ===

Ôªøusing System.Text.RegularExpressions;
using Configuration;
using Microsoft.Extensions.Logging;
using Models;
using OpenQA.Selenium;
namespace Services
{
public class PageProcessor : IPageProcessor
{
private readonly IWebDriver _driver;
private readonly AppConfig _config;
private readonly ILogger<PageProcessor> _logger;
private readonly ExecutionOptions _executionOptions;
private const string FolderName = "Page";
private readonly ISecurityCheck _securityCheck;
private string FolderPath => Path.Combine(_executionOptions.ExecutionFolder, FolderName);
private readonly ICaptureSnapshot _capture;
private readonly IDirectoryCheck _directoryCheck;
public PageProcessor(IWebDriverFactory driverFactory,
AppConfig config,
ILogger<PageProcessor> logger,
ExecutionOptions executionOptions,
ICaptureSnapshot capture,
ISecurityCheck securityCheck,
IDirectoryCheck directoryCheck)
{
_driver = driverFactory.Create();
_config = config;
_logger = logger;
_executionOptions = executionOptions;
_capture = capture;
_securityCheck = securityCheck;
_directoryCheck = directoryCheck;
_directoryCheck.EnsureDirectoryExists(FolderPath);
}
public async Task<List<string>> ProcessAllPagesAsync()
{
int pageCount = 0;
_logger.LogInformation($"üìÑ ID:{_executionOptions.TimeStamp} Beginning processing of up to {_config.JobSearch.MaxPages} result pages...");
var offers = new List<string>();
do
{
await _capture.CaptureArtifacts(FolderPath, "Page");
ScrollMove();
await Task.Delay(3000);
pageCount++;
_logger.LogInformation($"üìñ ID:{_executionOptions.TimeStamp} Processing results page {pageCount}...");
var pageOffers = await GetCurrentPageOffersAsync();
if (pageOffers == null) continue;
offers.AddRange(pageOffers);
_logger.LogInformation($"‚úîÔ∏è ID:{_executionOptions.TimeStamp} Results page {pageCount} processed. Found {pageOffers.Count()} listings.");
if (pageCount >= _config.JobSearch.MaxPages)
{
_logger.LogInformation($"‚ÑπÔ∏è ID:{_executionOptions.TimeStamp} Reached maximum configured page limit of {_config.JobSearch.MaxPages}.");
break;
}
} while (await NavigateToNextPageAsync());
return offers;
}
private string? ExtractJobIdUrl(string urlLinkedin, string url)
{
var uri = new Uri(url);
var segments = uri.Segments;
if (segments.Length >= 4 && segments[2].Equals("view/", StringComparison.OrdinalIgnoreCase))
{
var jobId = segments[3].TrimEnd('/');
return $"{urlLinkedin}/jobs/view/{jobId}/";
}
var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
if (queryParams["currentJobId"] != null)
{
var jobId = queryParams["currentJobId"];
return $"{urlLinkedin}/jobs/view/{jobId}/";
}
return null;
}
private string? ExtractJobUrl(IWebElement jobNode)
{
var card = jobNode.FindElements(By.XPath(".
.FirstOrDefault()
?? jobNode.FindElements(By.XPath(".
.FirstOrDefault();
if (card == null)
{
throw new Exception($"‚ùå ID:{_executionOptions.TimeStamp} Job card element not found in listing {jobNode.GetAttribute("id")}");
}
var jobAnchor = card.FindElements(By.CssSelector("a.job-card-job-posting-card-wrapper__card-link"))
.FirstOrDefault();
if (jobAnchor == null)
{
throw new Exception($"‚ùå ID:{_executionOptions.TimeStamp} Job link element not found in listing {jobNode.GetAttribute("id")}");
}
var jobUrl = jobAnchor.GetAttribute("href");
if (string.IsNullOrEmpty(jobUrl))
{
throw new Exception($"‚ùå ID:{_executionOptions.TimeStamp} Empty URL in listing {jobNode.GetAttribute("id")}");
}
return jobUrl;
}
private void ScrollMove()
{
var scrollable = _driver.FindElements(By.XPath("
.FirstOrDefault();
if (scrollable == null)
{
_logger.LogWarning("‚ö†Ô∏è ID:{_executionOptions.TimeStamp} Scrollable results container not found; skipping scroll operation.");
return;
}
var jsExecutor = (IJavaScriptExecutor)_driver;
long scrollHeight = (long)jsExecutor.ExecuteScript("return arguments[0].scrollHeight", scrollable);
long currentPosition = 0;
_logger.LogDebug($"üñ±Ô∏è ID:{_executionOptions.TimeStamp} Scrolling through job results container (total height: {scrollHeight}px)...");
while (currentPosition < scrollHeight)
{
currentPosition += 10;
jsExecutor.ExecuteScript("arguments[0].scrollTop = arguments[1];", scrollable, currentPosition);
Thread.Sleep(50);
}
_logger.LogDebug($"üñ±Ô∏è ID:{_executionOptions.TimeStamp} Scrolling completed.");
}
private async Task<bool> NavigateToNextPageAsync()
{
try
{
var nextButton = _driver.FindElements(By.XPath("
.FirstOrDefault(b => b.Enabled);
if (nextButton == null)
{
_logger.LogInformation($"‚èπÔ∏è ID:{_executionOptions.TimeStamp} No additional results pages detected; pagination completed.");
return false;
}
_logger.LogDebug($"‚è≠Ô∏è ID:{_executionOptions.TimeStamp} Clicking to navigate to next page...");
nextButton.Click();
await Task.Delay(3000);
if (_securityCheck.IsSecurityChek())
{
await _securityCheck.HandleSecurityPage();
throw new InvalidOperationException(
$"‚ùå ID:{_executionOptions.TimeStamp} LinkedIn requires manual security verification. Please complete verification in the browser before proceeding.");
}
var jobContainer = _driver.FindElements(By.XPath("
if (jobContainer == null)
{
await _securityCheck.HandleUnexpectedPage();
throw new InvalidOperationException(
$"‚ùå ID:{_executionOptions.TimeStamp} Failed to load next page of job listings. Current URL: {_driver.Url}");
}
_logger.LogInformation($"‚úÖ ID:{_executionOptions.TimeStamp} Successfully navigated to the next page of results.");
return true;
}
catch (Exception ex)
{
_logger.LogWarning(ex, $"‚ö†Ô∏è ID:{_executionOptions.TimeStamp} Exception encountered while navigating to the next page.");
return false;
}
}
private async Task<IEnumerable<string>?> GetCurrentPageOffersAsync()
{
await Task.Delay(2000);
var jobContainer = _driver.FindElements(By.XPath("
.FirstOrDefault();
if (jobContainer == null)
{
_logger.LogWarning($"‚ö†Ô∏è ID:{_executionOptions.TimeStamp} No job listings container found on the current page.");
return null;
}
var jobNodes = jobContainer.FindElements(By.XPath(".
if (jobNodes == null || !jobNodes.Any())
{
_logger.LogWarning($"‚ö†Ô∏è ID:{_executionOptions.TimeStamp} No job listings detected on the current page.");
return null;
}
_logger.LogDebug($"üîç ID:{_executionOptions.TimeStamp} Detected {jobNodes.Count} job listings on the current page.");
var offers = new List<string>();
foreach (var jobNode in jobNodes)
{
try
{
var jobUrl = ExtractJobUrl(jobNode);
if (!string.IsNullOrEmpty(jobUrl))
{
var url = ExtractJobIdUrl("https://www.linkedin.com", jobUrl);
if (!string.IsNullOrWhiteSpace(url))
{
offers.Add(url);
}
}
}
catch (Exception ex)
{
_logger.LogWarning(ex, $"‚ö†Ô∏è ID:{_executionOptions.TimeStamp} Failed to extract job URL for listing with ID: {jobNode.GetAttribute("id")}");
}
}
return offers;
}
}
}

=== FILE: F:\ValkyrieHire\Services\SecurityCheck.cs ===

Ôªøusing Microsoft.Extensions.Logging;
using Models;
using OpenQA.Selenium;
using OpenQA.Selenium.Support.UI;
namespace Services
{
public class SecurityCheck : ISecurityCheck
{
private readonly ILogger<JobOfferDetail> _logger;
private readonly IWebDriver _driver;
private readonly WebDriverWait _wait;
private readonly List<Models.JobOfferDetail> _offersDetail;
private readonly ICaptureSnapshot _capture;
private readonly ExecutionOptions _executionOptions;
private const string FolderName = "SecurityCheck";
private string FolderPath => Path.Combine(_executionOptions.ExecutionFolder, FolderName);
private readonly IDirectoryCheck _directoryCheck;
public SecurityCheck(IWebDriverFactory driverFactory,
ILogger<JobOfferDetail> logger,
ICaptureSnapshot capture,
ExecutionOptions executionOptions,
IDirectoryCheck directoryCheck)
{
_offersDetail = new List<Models.JobOfferDetail>();
_driver = driverFactory.Create();
_logger = logger;
_wait = new WebDriverWait(_driver, TimeSpan.FromSeconds(10));
_capture = capture;
_executionOptions = executionOptions;
_directoryCheck = directoryCheck;
_directoryCheck.EnsureDirectoryExists(FolderPath);
}
public bool IsSecurityChek()
{
var title = _driver.Title.Contains("Security Verification");
var captcha = _driver.FindElements(By.Id("captcha-internal")).Any();
var text = _driver.FindElements(By.XPath("
return title || captcha || text;
}
public async Task TryStartPuzzle()
{
try
{
_logger.LogDebug($"üîé ID:{_executionOptions.TimeStamp} Searching for 'Start Puzzle' button...");
await _capture.CaptureArtifacts(_executionOptions.ExecutionFolder, "Error in Detailed Job Offer");
var startPuzzleButton = _wait.Until(driver =>
{
var xpathText = "
var button = driver.FindElements(By.XPath(xpathText))
.FirstOrDefault();
return (button != null && button.Displayed && button.Enabled) ? button : null;
});
await _capture.CaptureArtifacts(FolderPath, "Error in Detailed Job Offer");
if (startPuzzleButton == null)
{
_logger.LogWarning($"‚ö†Ô∏è ID:{_executionOptions.TimeStamp} 'Start Puzzle' button not found on security check page.");
}
if (!startPuzzleButton.Displayed || !startPuzzleButton.Enabled)
{
_logger.LogWarning($"‚ö†Ô∏è ID:{_executionOptions.TimeStamp} 'Start Puzzle' button is not interactable.");
}
_logger.LogInformation($"üß© ID:{_executionOptions.TimeStamp} Clicking 'Start Puzzle' button...");
startPuzzleButton.Click();
}
catch (Exception ex)
{
_logger.LogError(ex, $"‚ùå ID:{_executionOptions.TimeStamp} Failed to click 'Start Puzzle' button.");
}
}
public async Task HandleSecurityPage()
{
var timestamp = await _capture.CaptureArtifacts(FolderPath, "SecurityPageDetected");
_logger.LogError($" ID:{_executionOptions.TimeStamp} Unexpected page layout detected.");
Console.WriteLine("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
Console.WriteLine("‚ïë           SECURITY PAGE DETECTED          ‚ïë");
Console.WriteLine("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
Console.WriteLine($"‚ïë Current URL: {_driver.Url,-30} ‚ïë");
Console.WriteLine("‚ïë                                            ‚ïë");
Console.WriteLine($"‚ïë HTML saved to: {timestamp}.html ‚ïë");
Console.WriteLine($"‚ïë Screenshot saved to: {timestamp}.png ‚ïë");
Console.WriteLine("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");
}
public async Task HandleUnexpectedPage()
{
var timestamp = await _capture.CaptureArtifacts(FolderPath, "UnexpectedPageDetected");
_logger.LogError($" ID:{_executionOptions.TimeStamp} Unexpected page layout detected.");
Console.WriteLine("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
Console.WriteLine("‚ïë           UNEXPECTED PAGE DETECTED          ‚ïë");
Console.WriteLine("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
Console.WriteLine($"‚ïë Current URL: {_driver.Url,-30} ‚ïë");
Console.WriteLine("‚ïë                                            ‚ïë");
Console.WriteLine($"‚ïë HTML saved to: {timestamp}.html ‚ïë");
Console.WriteLine($"‚ïë Screenshot saved to: {timestamp}.png ‚ïë");
Console.WriteLine("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");
}
}
}

=== FILE: F:\ValkyrieHire\Services\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs ===

using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

=== FILE: F:\ValkyrieHire\Services\obj\Debug\net8.0\Services.AssemblyInfo.cs ===

using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Services")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+34aec973365813b2c095606106da7523a588daab")]
[assembly: System.Reflection.AssemblyProductAttribute("Services")]
[assembly: System.Reflection.AssemblyTitleAttribute("Services")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

=== FILE: F:\ValkyrieHire\Services\obj\Debug\net8.0\Services.GlobalUsings.g.cs ===

global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;